{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "postal-smith",
   "metadata": {},
   "outputs": [],
   "source": [
    "import netket as nk\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "collected-appendix",
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 1\n",
    "hi = nk.hilbert.Spin(0.5, N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "choice-pierre",
   "metadata": {},
   "outputs": [],
   "source": [
    "ii = 0\n",
    "\n",
    "sx = nk.operator.spin.sigmax(hi, ii)\n",
    "sy = nk.operator.spin.sigmay(hi, ii)\n",
    "sz = nk.operator.spin.sigmaz(hi, ii)\n",
    "\n",
    "sm = nk.operator.spin.sigmam(hi, ii)\n",
    "sp = nk.operator.spin.sigmap(hi, ii)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "asian-westminster",
   "metadata": {},
   "outputs": [],
   "source": [
    "_sx = np.array([[0, 1], [1, 0]])\n",
    "_sy = np.array([[0, -1.0j], [1.0j, 0]])\n",
    "_sz = np.array([[1, 0], [0, -1]])\n",
    "_sm = np.array([[0, 0], [1, 0]])\n",
    "_sp = np.array([[0, 1], [0, 0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "moderate-rover",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.+0.j, 0.+0.j],\n",
       "       [0.+0.j, 1.+0.j]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-1j*_sx@_sy@_sz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dedicated-sport",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.+0.j, 1.+0.j],\n",
       "       [0.+0.j, 0.+0.j]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.5*(sx -1j*sy).to_dense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "parliamentary-hours",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1.],\n",
       "       [0., 0.]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sm.to_dense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "essential-press",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.+0.j,  0.+0.j],\n",
       "       [ 0.+0.j, -1.+0.j]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(-1j*sx@sy@sz).to_dense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "major-cream",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.+0.j, 0.+1.j],\n",
       "       [0.-1.j, 0.+0.j]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sy.to_dense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "neutral-circulation",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Metropolis Local Sampling\n",
    "hi = nk.hilbert.Spin(0.5, N)\n",
    "op = nk.operator.spin.sigmax(hi, 0) + nk.operator.spin.sigmay(hi, 0) \n",
    "vs = nk.variational.MCMixedState(nk.sampler.MetropolisLocal(nk.hilbert.DoubledHilbert(hi)), nk.models.NDM(beta=1,), n_samples=300, n_samples_diag=200)\n",
    "\n",
    "vs.init_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "shaped-healing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeviceArray([[0.50104564+0.j        , 0.4997226 +0.00772518j],\n",
       "             [0.4997226 -0.00772518j, 0.49895436+0.j        ]],            dtype=complex128)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vs.to_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "short-liver",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0.+0.j, 1.+1.j],\n",
       "        [1.-1.j, 0.+0.j]])]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "op.operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prostate-roulette",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "accepting-compromise",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.+0.j, 1.+1.j],\n",
       "       [1.-1.j, 0.+0.j]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "op.to_dense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "revised-prize",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.984+0.105j ± 0.070 [σ²=1.019, R̂=1.3440]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vs.expect(op)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "future-sunset",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0148955668546005+0j)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.trace(op@vs.to_matrix())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "neutral-polyester",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "op.is_hermitian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "adverse-accused",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name '_sx' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-13-c70a7c513100>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_sx\u001b[0m\u001b[0;34m@\u001b[0m\u001b[0m_sy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name '_sx' is not defined"
     ]
    }
   ],
   "source": [
    "_sx@_sy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "unlimited-remainder",
   "metadata": {},
   "outputs": [],
   "source": [
    "_sx@_sy.conj()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "laughing-compilation",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (Netket development)",
   "language": "python",
   "name": "dev-netket"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
